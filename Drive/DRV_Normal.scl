FUNCTION_BLOCK "DRV_Normal"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      X_ConveyorNo : Bool;   // Conveyor Number
      X_CircuitBreaker_OK : Bool;   // Circuit breaker OK (MOCB)
      X_3P_ContactorEnabled : Bool;
      X_InverterOK : Bool;
      X_Reset : Bool;
      X_Forward : Bool;
      X_Reverse : Bool;
      X_Slow : Bool;
   END_VAR

   VAR_OUTPUT 
      Q_Forward : Bool;   // Run conveyor Forward
      Q_Reverse : Bool;   // Run conveyor Reverse
      Q_Slow : Bool;   // Run conveyor Slow
      Q_Reset : Bool;   // Reset
      R_DV_InverterFault : Bool;   // Inverter Fault
      Y_CircuitBrekaerFault : Bool;   // Conveyor Motor circuit breaker fault
   END_VAR

   VAR 
      CircuitBreaker_Alarm {InstructionName := 'Program_Alarm'; LibVersion := '1.0'} : Program_Alarm;
      CheckInverter { S7_SetPoint := 'True'} : Bool;
      CheckTmr {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;   // Timer to delay checking fault status of  Inverter
      ResetTmr {InstructionName := 'TOF_TIME'; LibVersion := '1.0'} : TOF_TIME;
      Inverter_Alarm {InstructionName := 'Program_Alarm'; LibVersion := '1.0'} : Program_Alarm;
   END_VAR


BEGIN
	// Inverter MOCB（Motor circuit breaker) fault
	
	IF #X_CircuitBreaker_OK THEN
	    #Y_CircuitBrekaerFault := TRUE;
	ELSE
	    #Y_CircuitBrekaerFault := FALSE;
	END_IF;
	
	
	//Check status of inverter (via input siganl)
	IF #X_3P_ContactorEnabled AND NOT #X_Reset THEN
	    #CheckInverter := true;
	ELSE
	    #CheckInverter := FALSE;
	END_IF;
	
	// This timer delays checking the fault status of the Inverter OK signal to be generated by the drive.
	#CheckTmr(IN:=#CheckInverter,
	          PT:=T#3S);
	
	
	// Inverter Fault
	(*When a fault is detected. latch the fault Until a reset pulse.
	 Unlatch the fault on the reset pulse whcih will cycle power to the inverter to clear the fault.*)
	
	IF #CheckTmr.Q AND NOT #X_InverterOK THEN
	    #R_DV_InverterFault := TRUE;
	ELSIF #X_Reset THEN
	    #R_DV_InverterFault := FALSE;
	END_IF;
	
	//inverter Reset timer
	(** when a Inverter fault occurs we leave the inverter energised so the fault diagostic LED can be interrogated. 
	 when a reset pulse is given, this timer is used to remove power from the inverter for the period of the timer. to the inverter***)
	#ResetTmr(IN:=#R_DV_InverterFault AND #X_Reset,
	          PT:=T#2s);
	
	
	// Reset inverter
	#Q_Reset := #ResetTmr.Q;
	
	//Outputs
	#Q_Forward := #X_Forward;
	#Q_Reverse := #X_Reverse;
	#Q_Slow := #X_Slow;
	
	
	
	//Alarms
	#CircuitBreaker_Alarm(SIG := #Y_CircuitBrekaerFault,
	                      SD_1 := #X_ConveyorNo);
	
	
	#Inverter_Alarm(SIG:=#R_DV_InverterFault,
	                SD_1:=#X_ConveyorNo);
	
	
END_FUNCTION_BLOCK

